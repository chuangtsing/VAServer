// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vanet_pb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "vanet_pb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace vanet_pb {

namespace {

const ::google::protobuf::Descriptor* VideoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartialInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartialInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerMessage_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Resource_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProcessMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_vanet_5fpb_2eproto() {
  protobuf_AddDesc_vanet_5fpb_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "vanet_pb.proto");
  GOOGLE_CHECK(file != NULL);
  VideoInfo_descriptor_ = file->message_type(0);
  static const int VideoInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, bitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, mime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, loc_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, loc_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, class_probs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, frames_processed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, frames_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, process_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, extraction_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, classification_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, est_process_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, tags_),
  };
  VideoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoInfo_descriptor_,
      VideoInfo::default_instance_,
      VideoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoInfo));
  PartialInfo_descriptor_ = file->message_type(1);
  static const int PartialInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, final_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, frame_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, batch_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, process_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, class_probs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, tags_),
  };
  PartialInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartialInfo_descriptor_,
      PartialInfo::default_instance_,
      PartialInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartialInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartialInfo));
  ServerMessage_descriptor_ = file->message_type(2);
  static const int ServerMessage_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, loc_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, loc_long_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, process_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, top_k_),
  };
  ServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMessage_descriptor_,
      ServerMessage::default_instance_,
      ServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMessage));
  ServerMessage_Type_descriptor_ = ServerMessage_descriptor_->enum_type(0);
  ClientMessage_descriptor_ = file->message_type(3);
  static const int ClientMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, mac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, video_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, partial_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, terminate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, ack_),
  };
  ClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage));
  ClientMessage_Type_descriptor_ = ClientMessage_descriptor_->enum_type(0);
  Resource_descriptor_ = file->enum_type(0);
  ProcessMode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_vanet_5fpb_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoInfo_descriptor_, &VideoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartialInfo_descriptor_, &PartialInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMessage_descriptor_, &ServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_descriptor_, &ClientMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_vanet_5fpb_2eproto() {
  delete VideoInfo::default_instance_;
  delete VideoInfo_reflection_;
  delete PartialInfo::default_instance_;
  delete PartialInfo_reflection_;
  delete ServerMessage::default_instance_;
  delete ServerMessage_reflection_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_reflection_;
}

void protobuf_AddDesc_vanet_5fpb_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016vanet_pb.proto\022\010vanet_pb\"\235\003\n\tVideoInfo"
    "\022\014\n\004path\030\001 \002(\t\022\014\n\004name\030\002 \001(\t\022\021\n\ttimestam"
    "p\030\003 \001(\t\022\014\n\004size\030\004 \001(\004\022\020\n\010duration\030\005 \001(\004\022"
    "\017\n\007bitrate\030\006 \001(\r\022\014\n\004mime\030\007 \001(\t\022\017\n\007loc_la"
    "t\030\010 \001(\001\022\020\n\010loc_long\030\t \001(\001\022\r\n\005width\030\n \001(\r"
    "\022\016\n\006height\030\013 \001(\r\022\020\n\010rotation\030\014 \001(\r\022\023\n\013cl"
    "ass_probs\030\r \003(\002\022\030\n\020frames_processed\030\016 \001("
    "\r\022\024\n\014frames_total\030\017 \001(\r\022+\n\014process_mode\030"
    "\020 \001(\0162\025.vanet_pb.ProcessMode\022\027\n\017extracti"
    "on_time\030\021 \001(\r\022\033\n\023classification_time\030\022 \001"
    "(\r\022\030\n\020est_process_time\030\023 \001(\r\022\014\n\004tags\030\024 \003"
    "(\r\"\242\001\n\013PartialInfo\022\014\n\004path\030\001 \002(\t\022\r\n\005fina"
    "l\030\002 \001(\010\022\022\n\nframe_size\030\003 \001(\r\022\022\n\nbatch_siz"
    "e\030\004 \001(\r\022+\n\014process_mode\030\005 \001(\0162\025.vanet_pb"
    ".ProcessMode\022\023\n\013class_probs\030\006 \003(\002\022\014\n\004tag"
    "s\030\007 \003(\r\"\331\003\n\rServerMessage\022*\n\004type\030\001 \002(\0162"
    "\034.vanet_pb.ServerMessage.Type\022\014\n\004path\030\002 "
    "\003(\t\022\014\n\004tags\030\003 \003(\r\022\022\n\nstart_time\030\004 \001(\t\022\020\n"
    "\010end_time\030\005 \001(\t\022\017\n\007loc_lat\030\006 \001(\001\022\020\n\010loc_"
    "long\030\007 \001(\001\022+\n\014process_mode\030\010 \003(\0162\025.vanet"
    "_pb.ProcessMode\022%\n\tresources\030\t \003(\0162\022.van"
    "et_pb.Resource\022\014\n\004size\030\n \003(\004\022\013\n\003ack\030\013 \001("
    "\010\022\n\n\002ip\030\014 \001(\t\022\r\n\005top_k\030\r \001(\r\"\254\001\n\004Type\022\013\n"
    "\007CONNECT\020\000\022\010\n\004INIT\020\001\022\007\n\003RES\020\002\022\r\n\tQUERY_A"
    "LL\020\003\022\r\n\tQUERY_TAG\020\004\022\016\n\nQUERY_TIME\020\005\022\022\n\016Q"
    "UERY_LOCATION\020\006\022\025\n\021PROCESS_DIRECTIVE\020\007\022\021"
    "\n\rVIDEO_REQUEST\020\010\022\010\n\004PING\020\t\022\016\n\nDISCONNEC"
    "T\020\n\"\366\002\n\rClientMessage\022\013\n\003mac\030\001 \002(\004\022*\n\004ty"
    "pe\030\002 \002(\0162\034.vanet_pb.ClientMessage.Type\022\014"
    "\n\004size\030\003 \001(\005\022\'\n\nvideo_info\030\004 \003(\0132\023.vanet"
    "_pb.VideoInfo\022+\n\014partial_info\030\005 \001(\0132\025.va"
    "net_pb.PartialInfo\022%\n\tresources\030\006 \003(\0162\022."
    "vanet_pb.Resource\022\021\n\tterminate\030\007 \001(\010\022\013\n\003"
    "ack\030\010 \001(\010\"\200\001\n\004Type\022\013\n\007CONNECT\020\000\022\010\n\004INIT\020"
    "\001\022\t\n\005VIDEO\020\002\022\016\n\nVIDEO_INFO\020\003\022\020\n\014PARTIAL_"
    "INFO\020\004\022\t\n\005FRAME\020\005\022\010\n\004PING\020\006\022\017\n\013UPLINK_TE"
    "ST\020\007\022\016\n\nDISCONNECT\020\010*8\n\010Resource\022\t\n\005MODE"
    "L\020\000\022\013\n\007WEIGHTS\020\001\022\010\n\004MEAN\020\002\022\n\n\006SYNSET\020\003*/"
    "\n\013ProcessMode\022\n\n\006MOBILE\020\001\022\n\n\006SERVER\020\002\022\010\n"
    "\004BOTH\020\003B\025\n\023edu.psu.cse.vadroid", 1590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "vanet_pb.proto", &protobuf_RegisterTypes);
  VideoInfo::default_instance_ = new VideoInfo();
  PartialInfo::default_instance_ = new PartialInfo();
  ServerMessage::default_instance_ = new ServerMessage();
  ClientMessage::default_instance_ = new ClientMessage();
  VideoInfo::default_instance_->InitAsDefaultInstance();
  PartialInfo::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_vanet_5fpb_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_vanet_5fpb_2eproto {
  StaticDescriptorInitializer_vanet_5fpb_2eproto() {
    protobuf_AddDesc_vanet_5fpb_2eproto();
  }
} static_descriptor_initializer_vanet_5fpb_2eproto_;
const ::google::protobuf::EnumDescriptor* Resource_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Resource_descriptor_;
}
bool Resource_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProcessMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProcessMode_descriptor_;
}
bool ProcessMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int VideoInfo::kPathFieldNumber;
const int VideoInfo::kNameFieldNumber;
const int VideoInfo::kTimestampFieldNumber;
const int VideoInfo::kSizeFieldNumber;
const int VideoInfo::kDurationFieldNumber;
const int VideoInfo::kBitrateFieldNumber;
const int VideoInfo::kMimeFieldNumber;
const int VideoInfo::kLocLatFieldNumber;
const int VideoInfo::kLocLongFieldNumber;
const int VideoInfo::kWidthFieldNumber;
const int VideoInfo::kHeightFieldNumber;
const int VideoInfo::kRotationFieldNumber;
const int VideoInfo::kClassProbsFieldNumber;
const int VideoInfo::kFramesProcessedFieldNumber;
const int VideoInfo::kFramesTotalFieldNumber;
const int VideoInfo::kProcessModeFieldNumber;
const int VideoInfo::kExtractionTimeFieldNumber;
const int VideoInfo::kClassificationTimeFieldNumber;
const int VideoInfo::kEstProcessTimeFieldNumber;
const int VideoInfo::kTagsFieldNumber;
#endif  // !_MSC_VER

VideoInfo::VideoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VideoInfo::InitAsDefaultInstance() {
}

VideoInfo::VideoInfo(const VideoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VideoInfo::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  size_ = GOOGLE_ULONGLONG(0);
  duration_ = GOOGLE_ULONGLONG(0);
  bitrate_ = 0u;
  mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loc_lat_ = 0;
  loc_long_ = 0;
  width_ = 0u;
  height_ = 0u;
  rotation_ = 0u;
  frames_processed_ = 0u;
  frames_total_ = 0u;
  process_mode_ = 1;
  extraction_time_ = 0u;
  classification_time_ = 0u;
  est_process_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoInfo::~VideoInfo() {
  SharedDtor();
}

void VideoInfo::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    delete mime_;
  }
  if (this != default_instance_) {
  }
}

void VideoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoInfo_descriptor_;
}

const VideoInfo& VideoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vanet_5fpb_2eproto();
  return *default_instance_;
}

VideoInfo* VideoInfo::default_instance_ = NULL;

VideoInfo* VideoInfo::New() const {
  return new VideoInfo;
}

void VideoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_timestamp()) {
      if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
        timestamp_->clear();
      }
    }
    size_ = GOOGLE_ULONGLONG(0);
    duration_ = GOOGLE_ULONGLONG(0);
    bitrate_ = 0u;
    if (has_mime()) {
      if (mime_ != &::google::protobuf::internal::kEmptyString) {
        mime_->clear();
      }
    }
    loc_lat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    loc_long_ = 0;
    width_ = 0u;
    height_ = 0u;
    rotation_ = 0u;
    frames_processed_ = 0u;
    frames_total_ = 0u;
    process_mode_ = 1;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    extraction_time_ = 0u;
    classification_time_ = 0u;
    est_process_time_ = 0u;
  }
  class_probs_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_timestamp;
        break;
      }

      // optional string timestamp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // optional uint64 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duration;
        break;
      }

      // optional uint64 duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bitrate;
        break;
      }

      // optional uint32 bitrate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bitrate_)));
          set_has_bitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mime;
        break;
      }

      // optional string mime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mime().data(), this->mime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_loc_lat;
        break;
      }

      // optional double loc_lat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loc_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_lat_)));
          set_has_loc_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_loc_long;
        break;
      }

      // optional double loc_long = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loc_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_long_)));
          set_has_loc_long();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_width;
        break;
      }

      // optional uint32 width = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_height;
        break;
      }

      // optional uint32 height = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rotation;
        break;
      }

      // optional uint32 rotation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_class_probs;
        break;
      }

      // repeated float class_probs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_class_probs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 109, input, this->mutable_class_probs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_probs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_class_probs;
        if (input->ExpectTag(112)) goto parse_frames_processed;
        break;
      }

      // optional uint32 frames_processed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frames_processed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frames_processed_)));
          set_has_frames_processed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_frames_total;
        break;
      }

      // optional uint32 frames_total = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frames_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frames_total_)));
          set_has_frames_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_process_mode;
        break;
      }

      // optional .vanet_pb.ProcessMode process_mode = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vanet_pb::ProcessMode_IsValid(value)) {
            set_process_mode(static_cast< ::vanet_pb::ProcessMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_extraction_time;
        break;
      }

      // optional uint32 extraction_time = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraction_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraction_time_)));
          set_has_extraction_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_classification_time;
        break;
      }

      // optional uint32 classification_time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classification_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &classification_time_)));
          set_has_classification_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_est_process_time;
        break;
      }

      // optional uint32 est_process_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_est_process_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &est_process_time_)));
          set_has_est_process_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tags;
        break;
      }

      // repeated uint32 tags = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 160, input, this->mutable_tags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VideoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->timestamp(), output);
  }

  // optional uint64 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // optional uint64 duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->duration(), output);
  }

  // optional uint32 bitrate = 6;
  if (has_bitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bitrate(), output);
  }

  // optional string mime = 7;
  if (has_mime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime().data(), this->mime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->mime(), output);
  }

  // optional double loc_lat = 8;
  if (has_loc_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->loc_lat(), output);
  }

  // optional double loc_long = 9;
  if (has_loc_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->loc_long(), output);
  }

  // optional uint32 width = 10;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->width(), output);
  }

  // optional uint32 height = 11;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->height(), output);
  }

  // optional uint32 rotation = 12;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->rotation(), output);
  }

  // repeated float class_probs = 13;
  for (int i = 0; i < this->class_probs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      13, this->class_probs(i), output);
  }

  // optional uint32 frames_processed = 14;
  if (has_frames_processed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->frames_processed(), output);
  }

  // optional uint32 frames_total = 15;
  if (has_frames_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->frames_total(), output);
  }

  // optional .vanet_pb.ProcessMode process_mode = 16;
  if (has_process_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->process_mode(), output);
  }

  // optional uint32 extraction_time = 17;
  if (has_extraction_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->extraction_time(), output);
  }

  // optional uint32 classification_time = 18;
  if (has_classification_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->classification_time(), output);
  }

  // optional uint32 est_process_time = 19;
  if (has_est_process_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->est_process_time(), output);
  }

  // repeated uint32 tags = 20;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      20, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VideoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string timestamp = 3;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->timestamp(), target);
  }

  // optional uint64 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  // optional uint64 duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->duration(), target);
  }

  // optional uint32 bitrate = 6;
  if (has_bitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bitrate(), target);
  }

  // optional string mime = 7;
  if (has_mime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mime().data(), this->mime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->mime(), target);
  }

  // optional double loc_lat = 8;
  if (has_loc_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->loc_lat(), target);
  }

  // optional double loc_long = 9;
  if (has_loc_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->loc_long(), target);
  }

  // optional uint32 width = 10;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->width(), target);
  }

  // optional uint32 height = 11;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->height(), target);
  }

  // optional uint32 rotation = 12;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->rotation(), target);
  }

  // repeated float class_probs = 13;
  for (int i = 0; i < this->class_probs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(13, this->class_probs(i), target);
  }

  // optional uint32 frames_processed = 14;
  if (has_frames_processed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->frames_processed(), target);
  }

  // optional uint32 frames_total = 15;
  if (has_frames_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->frames_total(), target);
  }

  // optional .vanet_pb.ProcessMode process_mode = 16;
  if (has_process_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->process_mode(), target);
  }

  // optional uint32 extraction_time = 17;
  if (has_extraction_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->extraction_time(), target);
  }

  // optional uint32 classification_time = 18;
  if (has_classification_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->classification_time(), target);
  }

  // optional uint32 est_process_time = 19;
  if (has_est_process_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->est_process_time(), target);
  }

  // repeated uint32 tags = 20;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(20, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VideoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string timestamp = 3;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }

    // optional uint64 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->size());
    }

    // optional uint64 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duration());
    }

    // optional uint32 bitrate = 6;
    if (has_bitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bitrate());
    }

    // optional string mime = 7;
    if (has_mime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mime());
    }

    // optional double loc_lat = 8;
    if (has_loc_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double loc_long = 9;
    if (has_loc_long()) {
      total_size += 1 + 8;
    }

    // optional uint32 width = 10;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // optional uint32 height = 11;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // optional uint32 rotation = 12;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rotation());
    }

    // optional uint32 frames_processed = 14;
    if (has_frames_processed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frames_processed());
    }

    // optional uint32 frames_total = 15;
    if (has_frames_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frames_total());
    }

    // optional .vanet_pb.ProcessMode process_mode = 16;
    if (has_process_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->process_mode());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 extraction_time = 17;
    if (has_extraction_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraction_time());
    }

    // optional uint32 classification_time = 18;
    if (has_classification_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->classification_time());
    }

    // optional uint32 est_process_time = 19;
    if (has_est_process_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->est_process_time());
    }

  }
  // repeated float class_probs = 13;
  {
    int data_size = 0;
    data_size = 4 * this->class_probs_size();
    total_size += 1 * this->class_probs_size() + data_size;
  }

  // repeated uint32 tags = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tags(i));
    }
    total_size += 2 * this->tags_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoInfo::MergeFrom(const VideoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  class_probs_.MergeFrom(from.class_probs_);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_bitrate()) {
      set_bitrate(from.bitrate());
    }
    if (from.has_mime()) {
      set_mime(from.mime());
    }
    if (from.has_loc_lat()) {
      set_loc_lat(from.loc_lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_loc_long()) {
      set_loc_long(from.loc_long());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_frames_processed()) {
      set_frames_processed(from.frames_processed());
    }
    if (from.has_frames_total()) {
      set_frames_total(from.frames_total());
    }
    if (from.has_process_mode()) {
      set_process_mode(from.process_mode());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_extraction_time()) {
      set_extraction_time(from.extraction_time());
    }
    if (from.has_classification_time()) {
      set_classification_time(from.classification_time());
    }
    if (from.has_est_process_time()) {
      set_est_process_time(from.est_process_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoInfo::CopyFrom(const VideoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VideoInfo::Swap(VideoInfo* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(name_, other->name_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(size_, other->size_);
    std::swap(duration_, other->duration_);
    std::swap(bitrate_, other->bitrate_);
    std::swap(mime_, other->mime_);
    std::swap(loc_lat_, other->loc_lat_);
    std::swap(loc_long_, other->loc_long_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(rotation_, other->rotation_);
    class_probs_.Swap(&other->class_probs_);
    std::swap(frames_processed_, other->frames_processed_);
    std::swap(frames_total_, other->frames_total_);
    std::swap(process_mode_, other->process_mode_);
    std::swap(extraction_time_, other->extraction_time_);
    std::swap(classification_time_, other->classification_time_);
    std::swap(est_process_time_, other->est_process_time_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoInfo_descriptor_;
  metadata.reflection = VideoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartialInfo::kPathFieldNumber;
const int PartialInfo::kFinalFieldNumber;
const int PartialInfo::kFrameSizeFieldNumber;
const int PartialInfo::kBatchSizeFieldNumber;
const int PartialInfo::kProcessModeFieldNumber;
const int PartialInfo::kClassProbsFieldNumber;
const int PartialInfo::kTagsFieldNumber;
#endif  // !_MSC_VER

PartialInfo::PartialInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartialInfo::InitAsDefaultInstance() {
}

PartialInfo::PartialInfo(const PartialInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartialInfo::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  final_ = false;
  frame_size_ = 0u;
  batch_size_ = 0u;
  process_mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartialInfo::~PartialInfo() {
  SharedDtor();
}

void PartialInfo::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void PartialInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartialInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartialInfo_descriptor_;
}

const PartialInfo& PartialInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vanet_5fpb_2eproto();
  return *default_instance_;
}

PartialInfo* PartialInfo::default_instance_ = NULL;

PartialInfo* PartialInfo::New() const {
  return new PartialInfo;
}

void PartialInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    final_ = false;
    frame_size_ = 0u;
    batch_size_ = 0u;
    process_mode_ = 1;
  }
  class_probs_.Clear();
  tags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartialInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_final;
        break;
      }

      // optional bool final = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_final:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &final_)));
          set_has_final();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frame_size;
        break;
      }

      // optional uint32 frame_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_size_)));
          set_has_frame_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_batch_size;
        break;
      }

      // optional uint32 batch_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_batch_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &batch_size_)));
          set_has_batch_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_process_mode;
        break;
      }

      // optional .vanet_pb.ProcessMode process_mode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vanet_pb::ProcessMode_IsValid(value)) {
            set_process_mode(static_cast< ::vanet_pb::ProcessMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_class_probs;
        break;
      }

      // repeated float class_probs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_class_probs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_class_probs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_class_probs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_class_probs;
        if (input->ExpectTag(56)) goto parse_tags;
        break;
      }

      // repeated uint32 tags = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_tags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_tags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartialInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // optional bool final = 2;
  if (has_final()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->final(), output);
  }

  // optional uint32 frame_size = 3;
  if (has_frame_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frame_size(), output);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->batch_size(), output);
  }

  // optional .vanet_pb.ProcessMode process_mode = 5;
  if (has_process_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->process_mode(), output);
  }

  // repeated float class_probs = 6;
  for (int i = 0; i < this->class_probs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->class_probs(i), output);
  }

  // repeated uint32 tags = 7;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->tags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartialInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional bool final = 2;
  if (has_final()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->final(), target);
  }

  // optional uint32 frame_size = 3;
  if (has_frame_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frame_size(), target);
  }

  // optional uint32 batch_size = 4;
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->batch_size(), target);
  }

  // optional .vanet_pb.ProcessMode process_mode = 5;
  if (has_process_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->process_mode(), target);
  }

  // repeated float class_probs = 6;
  for (int i = 0; i < this->class_probs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->class_probs(i), target);
  }

  // repeated uint32 tags = 7;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->tags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartialInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional bool final = 2;
    if (has_final()) {
      total_size += 1 + 1;
    }

    // optional uint32 frame_size = 3;
    if (has_frame_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_size());
    }

    // optional uint32 batch_size = 4;
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->batch_size());
    }

    // optional .vanet_pb.ProcessMode process_mode = 5;
    if (has_process_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->process_mode());
    }

  }
  // repeated float class_probs = 6;
  {
    int data_size = 0;
    data_size = 4 * this->class_probs_size();
    total_size += 1 * this->class_probs_size() + data_size;
  }

  // repeated uint32 tags = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tags(i));
    }
    total_size += 1 * this->tags_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartialInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartialInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartialInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartialInfo::MergeFrom(const PartialInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  class_probs_.MergeFrom(from.class_probs_);
  tags_.MergeFrom(from.tags_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_final()) {
      set_final(from.final());
    }
    if (from.has_frame_size()) {
      set_frame_size(from.frame_size());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
    if (from.has_process_mode()) {
      set_process_mode(from.process_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartialInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartialInfo::CopyFrom(const PartialInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PartialInfo::Swap(PartialInfo* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(final_, other->final_);
    std::swap(frame_size_, other->frame_size_);
    std::swap(batch_size_, other->batch_size_);
    std::swap(process_mode_, other->process_mode_);
    class_probs_.Swap(&other->class_probs_);
    tags_.Swap(&other->tags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartialInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartialInfo_descriptor_;
  metadata.reflection = PartialInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_Type_descriptor_;
}
bool ServerMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerMessage_Type ServerMessage::CONNECT;
const ServerMessage_Type ServerMessage::INIT;
const ServerMessage_Type ServerMessage::RES;
const ServerMessage_Type ServerMessage::QUERY_ALL;
const ServerMessage_Type ServerMessage::QUERY_TAG;
const ServerMessage_Type ServerMessage::QUERY_TIME;
const ServerMessage_Type ServerMessage::QUERY_LOCATION;
const ServerMessage_Type ServerMessage::PROCESS_DIRECTIVE;
const ServerMessage_Type ServerMessage::VIDEO_REQUEST;
const ServerMessage_Type ServerMessage::PING;
const ServerMessage_Type ServerMessage::DISCONNECT;
const ServerMessage_Type ServerMessage::Type_MIN;
const ServerMessage_Type ServerMessage::Type_MAX;
const int ServerMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerMessage::kTypeFieldNumber;
const int ServerMessage::kPathFieldNumber;
const int ServerMessage::kTagsFieldNumber;
const int ServerMessage::kStartTimeFieldNumber;
const int ServerMessage::kEndTimeFieldNumber;
const int ServerMessage::kLocLatFieldNumber;
const int ServerMessage::kLocLongFieldNumber;
const int ServerMessage::kProcessModeFieldNumber;
const int ServerMessage::kResourcesFieldNumber;
const int ServerMessage::kSizeFieldNumber;
const int ServerMessage::kAckFieldNumber;
const int ServerMessage::kIpFieldNumber;
const int ServerMessage::kTopKFieldNumber;
#endif  // !_MSC_VER

ServerMessage::ServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerMessage::InitAsDefaultInstance() {
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loc_lat_ = 0;
  loc_long_ = 0;
  ack_ = false;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  top_k_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage::~ServerMessage() {
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_descriptor_;
}

const ServerMessage& ServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vanet_5fpb_2eproto();
  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New() const {
  return new ServerMessage;
}

void ServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_start_time()) {
      if (start_time_ != &::google::protobuf::internal::kEmptyString) {
        start_time_->clear();
      }
    }
    if (has_end_time()) {
      if (end_time_ != &::google::protobuf::internal::kEmptyString) {
        end_time_->clear();
      }
    }
    loc_lat_ = 0;
    loc_long_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    ack_ = false;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    top_k_ = 0u;
  }
  path_.Clear();
  tags_.Clear();
  process_mode_.Clear();
  resources_.Clear();
  size_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vanet_pb.ServerMessage.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vanet_pb::ServerMessage_Type_IsValid(value)) {
            set_type(static_cast< ::vanet_pb::ServerMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // repeated string path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path(this->path_size() - 1).data(),
            this->path(this->path_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        if (input->ExpectTag(24)) goto parse_tags;
        break;
      }

      // repeated uint32 tags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_tags())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tags())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tags;
        if (input->ExpectTag(34)) goto parse_start_time;
        break;
      }

      // optional string start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_start_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_start_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->start_time().data(), this->start_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_end_time;
        break;
      }

      // optional string end_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_end_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_end_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->end_time().data(), this->end_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_loc_lat;
        break;
      }

      // optional double loc_lat = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loc_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_lat_)));
          set_has_loc_lat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_loc_long;
        break;
      }

      // optional double loc_long = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loc_long:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loc_long_)));
          set_has_loc_long();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_process_mode;
        break;
      }

      // repeated .vanet_pb.ProcessMode process_mode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vanet_pb::ProcessMode_IsValid(value)) {
            add_process_mode(static_cast< ::vanet_pb::ProcessMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::vanet_pb::ProcessMode_IsValid,
                 this->mutable_process_mode())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_process_mode;
        if (input->ExpectTag(72)) goto parse_resources;
        break;
      }

      // repeated .vanet_pb.Resource resources = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resources:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vanet_pb::Resource_IsValid(value)) {
            add_resources(static_cast< ::vanet_pb::Resource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::vanet_pb::Resource_IsValid,
                 this->mutable_resources())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_resources;
        if (input->ExpectTag(80)) goto parse_size;
        break;
      }

      // repeated uint64 size = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 80, input, this->mutable_size())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_size())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_size;
        if (input->ExpectTag(88)) goto parse_ack;
        break;
      }

      // optional bool ack = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ip;
        break;
      }

      // optional string ip = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_top_k;
        break;
      }

      // optional uint32 top_k = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_top_k:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_k_)));
          set_has_top_k();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vanet_pb.ServerMessage.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated string path = 2;
  for (int i = 0; i < this->path_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->path(i).data(), this->path(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->path(i), output);
  }

  // repeated uint32 tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->tags(i), output);
  }

  // optional string start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->start_time(), output);
  }

  // optional string end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->end_time(), output);
  }

  // optional double loc_lat = 6;
  if (has_loc_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->loc_lat(), output);
  }

  // optional double loc_long = 7;
  if (has_loc_long()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->loc_long(), output);
  }

  // repeated .vanet_pb.ProcessMode process_mode = 8;
  for (int i = 0; i < this->process_mode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->process_mode(i), output);
  }

  // repeated .vanet_pb.Resource resources = 9;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->resources(i), output);
  }

  // repeated uint64 size = 10;
  for (int i = 0; i < this->size_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      10, this->size(i), output);
  }

  // optional bool ack = 11;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ack(), output);
  }

  // optional string ip = 12;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->ip(), output);
  }

  // optional uint32 top_k = 13;
  if (has_top_k()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->top_k(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .vanet_pb.ServerMessage.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated string path = 2;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path(i).data(), this->path(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->path(i), target);
  }

  // repeated uint32 tags = 3;
  for (int i = 0; i < this->tags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->tags(i), target);
  }

  // optional string start_time = 4;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->start_time().data(), this->start_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->start_time(), target);
  }

  // optional string end_time = 5;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->end_time().data(), this->end_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->end_time(), target);
  }

  // optional double loc_lat = 6;
  if (has_loc_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->loc_lat(), target);
  }

  // optional double loc_long = 7;
  if (has_loc_long()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->loc_long(), target);
  }

  // repeated .vanet_pb.ProcessMode process_mode = 8;
  for (int i = 0; i < this->process_mode_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->process_mode(i), target);
  }

  // repeated .vanet_pb.Resource resources = 9;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->resources(i), target);
  }

  // repeated uint64 size = 10;
  for (int i = 0; i < this->size_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(10, this->size(i), target);
  }

  // optional bool ack = 11;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ack(), target);
  }

  // optional string ip = 12;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->ip(), target);
  }

  // optional uint32 top_k = 13;
  if (has_top_k()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->top_k(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vanet_pb.ServerMessage.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string start_time = 4;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->start_time());
    }

    // optional string end_time = 5;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->end_time());
    }

    // optional double loc_lat = 6;
    if (has_loc_lat()) {
      total_size += 1 + 8;
    }

    // optional double loc_long = 7;
    if (has_loc_long()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional bool ack = 11;
    if (has_ack()) {
      total_size += 1 + 1;
    }

    // optional string ip = 12;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 top_k = 13;
    if (has_top_k()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->top_k());
    }

  }
  // repeated string path = 2;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->path(i));
  }

  // repeated uint32 tags = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->tags_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tags(i));
    }
    total_size += 1 * this->tags_size() + data_size;
  }

  // repeated .vanet_pb.ProcessMode process_mode = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->process_mode_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->process_mode(i));
    }
    total_size += 1 * this->process_mode_size() + data_size;
  }

  // repeated .vanet_pb.Resource resources = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->resources_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->resources(i));
    }
    total_size += 1 * this->resources_size() + data_size;
  }

  // repeated uint64 size = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->size_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->size(i));
    }
    total_size += 1 * this->size_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  tags_.MergeFrom(from.tags_);
  process_mode_.MergeFrom(from.process_mode_);
  resources_.MergeFrom(from.resources_);
  size_.MergeFrom(from.size_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_loc_lat()) {
      set_loc_lat(from.loc_lat());
    }
    if (from.has_loc_long()) {
      set_loc_long(from.loc_long());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_ack()) {
      set_ack(from.ack());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_top_k()) {
      set_top_k(from.top_k());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    path_.Swap(&other->path_);
    tags_.Swap(&other->tags_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(loc_lat_, other->loc_lat_);
    std::swap(loc_long_, other->loc_long_);
    process_mode_.Swap(&other->process_mode_);
    resources_.Swap(&other->resources_);
    size_.Swap(&other->size_);
    std::swap(ack_, other->ack_);
    std::swap(ip_, other->ip_);
    std::swap(top_k_, other->top_k_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessage_descriptor_;
  metadata.reflection = ServerMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientMessage_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_Type_descriptor_;
}
bool ClientMessage_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_Type ClientMessage::CONNECT;
const ClientMessage_Type ClientMessage::INIT;
const ClientMessage_Type ClientMessage::VIDEO;
const ClientMessage_Type ClientMessage::VIDEO_INFO;
const ClientMessage_Type ClientMessage::PARTIAL_INFO;
const ClientMessage_Type ClientMessage::FRAME;
const ClientMessage_Type ClientMessage::PING;
const ClientMessage_Type ClientMessage::UPLINK_TEST;
const ClientMessage_Type ClientMessage::DISCONNECT;
const ClientMessage_Type ClientMessage::Type_MIN;
const ClientMessage_Type ClientMessage::Type_MAX;
const int ClientMessage::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientMessage::kMacFieldNumber;
const int ClientMessage::kTypeFieldNumber;
const int ClientMessage::kSizeFieldNumber;
const int ClientMessage::kVideoInfoFieldNumber;
const int ClientMessage::kPartialInfoFieldNumber;
const int ClientMessage::kResourcesFieldNumber;
const int ClientMessage::kTerminateFieldNumber;
const int ClientMessage::kAckFieldNumber;
#endif  // !_MSC_VER

ClientMessage::ClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage::InitAsDefaultInstance() {
  partial_info_ = const_cast< ::vanet_pb::PartialInfo*>(&::vanet_pb::PartialInfo::default_instance());
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage::SharedCtor() {
  _cached_size_ = 0;
  mac_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  size_ = 0;
  partial_info_ = NULL;
  terminate_ = false;
  ack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage::~ClientMessage() {
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete partial_info_;
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_vanet_5fpb_2eproto();
  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New() const {
  return new ClientMessage;
}

void ClientMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mac_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    size_ = 0;
    if (has_partial_info()) {
      if (partial_info_ != NULL) partial_info_->::vanet_pb::PartialInfo::Clear();
    }
    terminate_ = false;
    ack_ = false;
  }
  video_info_.Clear();
  resources_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 mac = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mac_)));
          set_has_mac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .vanet_pb.ClientMessage.Type type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vanet_pb::ClientMessage_Type_IsValid(value)) {
            set_type(static_cast< ::vanet_pb::ClientMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_video_info;
        break;
      }

      // repeated .vanet_pb.VideoInfo video_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_video_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_video_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_video_info;
        if (input->ExpectTag(42)) goto parse_partial_info;
        break;
      }

      // optional .vanet_pb.PartialInfo partial_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_partial_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_partial_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resources;
        break;
      }

      // repeated .vanet_pb.Resource resources = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resources:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::vanet_pb::Resource_IsValid(value)) {
            add_resources(static_cast< ::vanet_pb::Resource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::vanet_pb::Resource_IsValid,
                 this->mutable_resources())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resources;
        if (input->ExpectTag(56)) goto parse_terminate;
        break;
      }

      // optional bool terminate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_terminate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminate_)));
          set_has_terminate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ack;
        break;
      }

      // optional bool ack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ack_)));
          set_has_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 mac = 1;
  if (has_mac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mac(), output);
  }

  // required .vanet_pb.ClientMessage.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // repeated .vanet_pb.VideoInfo video_info = 4;
  for (int i = 0; i < this->video_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->video_info(i), output);
  }

  // optional .vanet_pb.PartialInfo partial_info = 5;
  if (has_partial_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->partial_info(), output);
  }

  // repeated .vanet_pb.Resource resources = 6;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->resources(i), output);
  }

  // optional bool terminate = 7;
  if (has_terminate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->terminate(), output);
  }

  // optional bool ack = 8;
  if (has_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 mac = 1;
  if (has_mac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mac(), target);
  }

  // required .vanet_pb.ClientMessage.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // repeated .vanet_pb.VideoInfo video_info = 4;
  for (int i = 0; i < this->video_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->video_info(i), target);
  }

  // optional .vanet_pb.PartialInfo partial_info = 5;
  if (has_partial_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->partial_info(), target);
  }

  // repeated .vanet_pb.Resource resources = 6;
  for (int i = 0; i < this->resources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->resources(i), target);
  }

  // optional bool terminate = 7;
  if (has_terminate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->terminate(), target);
  }

  // optional bool ack = 8;
  if (has_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 mac = 1;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mac());
    }

    // required .vanet_pb.ClientMessage.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional .vanet_pb.PartialInfo partial_info = 5;
    if (has_partial_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->partial_info());
    }

    // optional bool terminate = 7;
    if (has_terminate()) {
      total_size += 1 + 1;
    }

    // optional bool ack = 8;
    if (has_ack()) {
      total_size += 1 + 1;
    }

  }
  // repeated .vanet_pb.VideoInfo video_info = 4;
  total_size += 1 * this->video_info_size();
  for (int i = 0; i < this->video_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->video_info(i));
  }

  // repeated .vanet_pb.Resource resources = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->resources_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->resources(i));
    }
    total_size += 1 * this->resources_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  video_info_.MergeFrom(from.video_info_);
  resources_.MergeFrom(from.resources_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mac()) {
      set_mac(from.mac());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_partial_info()) {
      mutable_partial_info()->::vanet_pb::PartialInfo::MergeFrom(from.partial_info());
    }
    if (from.has_terminate()) {
      set_terminate(from.terminate());
    }
    if (from.has_ack()) {
      set_ack(from.ack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < video_info_size(); i++) {
    if (!this->video_info(i).IsInitialized()) return false;
  }
  if (has_partial_info()) {
    if (!this->partial_info().IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other != this) {
    std::swap(mac_, other->mac_);
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    video_info_.Swap(&other->video_info_);
    std::swap(partial_info_, other->partial_info_);
    resources_.Swap(&other->resources_);
    std::swap(terminate_, other->terminate_);
    std::swap(ack_, other->ack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vanet_pb

// @@protoc_insertion_point(global_scope)
