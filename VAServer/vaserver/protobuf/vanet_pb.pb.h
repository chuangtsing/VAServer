// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vanet_pb.proto

#ifndef PROTOBUF_vanet_5fpb_2eproto__INCLUDED
#define PROTOBUF_vanet_5fpb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace vanet_pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_vanet_5fpb_2eproto();
void protobuf_AssignDesc_vanet_5fpb_2eproto();
void protobuf_ShutdownFile_vanet_5fpb_2eproto();

class VideoInfo;
class PartialInfo;
class ServerMessage;
class ClientMessage;

enum ServerMessage_Type {
  ServerMessage_Type_CONNECT = 0,
  ServerMessage_Type_INIT = 1,
  ServerMessage_Type_RES = 2,
  ServerMessage_Type_QUERY_ALL = 3,
  ServerMessage_Type_QUERY_TAG = 4,
  ServerMessage_Type_QUERY_TIME = 5,
  ServerMessage_Type_QUERY_LOCATION = 6,
  ServerMessage_Type_PROCESS_DIRECTIVE = 7,
  ServerMessage_Type_VIDEO_REQUEST = 8,
  ServerMessage_Type_PING = 9,
  ServerMessage_Type_DISCONNECT = 10
};
bool ServerMessage_Type_IsValid(int value);
const ServerMessage_Type ServerMessage_Type_Type_MIN = ServerMessage_Type_CONNECT;
const ServerMessage_Type ServerMessage_Type_Type_MAX = ServerMessage_Type_DISCONNECT;
const int ServerMessage_Type_Type_ARRAYSIZE = ServerMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerMessage_Type_descriptor();
inline const ::std::string& ServerMessage_Type_Name(ServerMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerMessage_Type_descriptor(), value);
}
inline bool ServerMessage_Type_Parse(
    const ::std::string& name, ServerMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerMessage_Type>(
    ServerMessage_Type_descriptor(), name, value);
}
enum ClientMessage_Type {
  ClientMessage_Type_CONNECT = 0,
  ClientMessage_Type_INIT = 1,
  ClientMessage_Type_VIDEO = 2,
  ClientMessage_Type_VIDEO_INFO = 3,
  ClientMessage_Type_PARTIAL_INFO = 4,
  ClientMessage_Type_FRAME = 5,
  ClientMessage_Type_PING = 6,
  ClientMessage_Type_UPLINK_TEST = 7,
  ClientMessage_Type_DISCONNECT = 8
};
bool ClientMessage_Type_IsValid(int value);
const ClientMessage_Type ClientMessage_Type_Type_MIN = ClientMessage_Type_CONNECT;
const ClientMessage_Type ClientMessage_Type_Type_MAX = ClientMessage_Type_DISCONNECT;
const int ClientMessage_Type_Type_ARRAYSIZE = ClientMessage_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientMessage_Type_descriptor();
inline const ::std::string& ClientMessage_Type_Name(ClientMessage_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientMessage_Type_descriptor(), value);
}
inline bool ClientMessage_Type_Parse(
    const ::std::string& name, ClientMessage_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientMessage_Type>(
    ClientMessage_Type_descriptor(), name, value);
}
enum Resource {
  MODEL = 0,
  WEIGHTS = 1,
  MEAN = 2,
  SYNSET = 3
};
bool Resource_IsValid(int value);
const Resource Resource_MIN = MODEL;
const Resource Resource_MAX = SYNSET;
const int Resource_ARRAYSIZE = Resource_MAX + 1;

const ::google::protobuf::EnumDescriptor* Resource_descriptor();
inline const ::std::string& Resource_Name(Resource value) {
  return ::google::protobuf::internal::NameOfEnum(
    Resource_descriptor(), value);
}
inline bool Resource_Parse(
    const ::std::string& name, Resource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Resource>(
    Resource_descriptor(), name, value);
}
enum ProcessMode {
  MOBILE = 1,
  SERVER = 2,
  BOTH = 3
};
bool ProcessMode_IsValid(int value);
const ProcessMode ProcessMode_MIN = MOBILE;
const ProcessMode ProcessMode_MAX = BOTH;
const int ProcessMode_ARRAYSIZE = ProcessMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcessMode_descriptor();
inline const ::std::string& ProcessMode_Name(ProcessMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcessMode_descriptor(), value);
}
inline bool ProcessMode_Parse(
    const ::std::string& name, ProcessMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessMode>(
    ProcessMode_descriptor(), name, value);
}
// ===================================================================

class VideoInfo : public ::google::protobuf::Message {
 public:
  VideoInfo();
  virtual ~VideoInfo();

  VideoInfo(const VideoInfo& from);

  inline VideoInfo& operator=(const VideoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoInfo& default_instance();

  void Swap(VideoInfo* other);

  // implements Message ----------------------------------------------

  VideoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoInfo& from);
  void MergeFrom(const VideoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string timestamp = 3;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 3;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional uint64 size = 4;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 4;
  inline ::google::protobuf::uint64 size() const;
  inline void set_size(::google::protobuf::uint64 value);

  // optional uint64 duration = 5;
  inline bool has_duration() const;
  inline void clear_duration();
  static const int kDurationFieldNumber = 5;
  inline ::google::protobuf::uint64 duration() const;
  inline void set_duration(::google::protobuf::uint64 value);

  // optional uint32 bitrate = 6;
  inline bool has_bitrate() const;
  inline void clear_bitrate();
  static const int kBitrateFieldNumber = 6;
  inline ::google::protobuf::uint32 bitrate() const;
  inline void set_bitrate(::google::protobuf::uint32 value);

  // optional string mime = 7;
  inline bool has_mime() const;
  inline void clear_mime();
  static const int kMimeFieldNumber = 7;
  inline const ::std::string& mime() const;
  inline void set_mime(const ::std::string& value);
  inline void set_mime(const char* value);
  inline void set_mime(const char* value, size_t size);
  inline ::std::string* mutable_mime();
  inline ::std::string* release_mime();
  inline void set_allocated_mime(::std::string* mime);

  // optional double loc_lat = 8;
  inline bool has_loc_lat() const;
  inline void clear_loc_lat();
  static const int kLocLatFieldNumber = 8;
  inline double loc_lat() const;
  inline void set_loc_lat(double value);

  // optional double loc_long = 9;
  inline bool has_loc_long() const;
  inline void clear_loc_long();
  static const int kLocLongFieldNumber = 9;
  inline double loc_long() const;
  inline void set_loc_long(double value);

  // optional uint32 width = 10;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 10;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // optional uint32 height = 11;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 11;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // optional uint32 rotation = 12;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 12;
  inline ::google::protobuf::uint32 rotation() const;
  inline void set_rotation(::google::protobuf::uint32 value);

  // repeated float class_probs = 13;
  inline int class_probs_size() const;
  inline void clear_class_probs();
  static const int kClassProbsFieldNumber = 13;
  inline float class_probs(int index) const;
  inline void set_class_probs(int index, float value);
  inline void add_class_probs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      class_probs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_class_probs();

  // optional uint32 frames_processed = 14;
  inline bool has_frames_processed() const;
  inline void clear_frames_processed();
  static const int kFramesProcessedFieldNumber = 14;
  inline ::google::protobuf::uint32 frames_processed() const;
  inline void set_frames_processed(::google::protobuf::uint32 value);

  // optional uint32 frames_total = 15;
  inline bool has_frames_total() const;
  inline void clear_frames_total();
  static const int kFramesTotalFieldNumber = 15;
  inline ::google::protobuf::uint32 frames_total() const;
  inline void set_frames_total(::google::protobuf::uint32 value);

  // optional .vanet_pb.ProcessMode process_mode = 16;
  inline bool has_process_mode() const;
  inline void clear_process_mode();
  static const int kProcessModeFieldNumber = 16;
  inline ::vanet_pb::ProcessMode process_mode() const;
  inline void set_process_mode(::vanet_pb::ProcessMode value);

  // optional uint32 extraction_time = 17;
  inline bool has_extraction_time() const;
  inline void clear_extraction_time();
  static const int kExtractionTimeFieldNumber = 17;
  inline ::google::protobuf::uint32 extraction_time() const;
  inline void set_extraction_time(::google::protobuf::uint32 value);

  // optional uint32 classification_time = 18;
  inline bool has_classification_time() const;
  inline void clear_classification_time();
  static const int kClassificationTimeFieldNumber = 18;
  inline ::google::protobuf::uint32 classification_time() const;
  inline void set_classification_time(::google::protobuf::uint32 value);

  // optional uint32 est_process_time = 19;
  inline bool has_est_process_time() const;
  inline void clear_est_process_time();
  static const int kEstProcessTimeFieldNumber = 19;
  inline ::google::protobuf::uint32 est_process_time() const;
  inline void set_est_process_time(::google::protobuf::uint32 value);

  // repeated uint32 tags = 20;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 20;
  inline ::google::protobuf::uint32 tags(int index) const;
  inline void set_tags(int index, ::google::protobuf::uint32 value);
  inline void add_tags(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tags() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:vanet_pb.VideoInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_duration();
  inline void clear_has_duration();
  inline void set_has_bitrate();
  inline void clear_has_bitrate();
  inline void set_has_mime();
  inline void clear_has_mime();
  inline void set_has_loc_lat();
  inline void clear_has_loc_lat();
  inline void set_has_loc_long();
  inline void clear_has_loc_long();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_frames_processed();
  inline void clear_has_frames_processed();
  inline void set_has_frames_total();
  inline void clear_has_frames_total();
  inline void set_has_process_mode();
  inline void clear_has_process_mode();
  inline void set_has_extraction_time();
  inline void clear_has_extraction_time();
  inline void set_has_classification_time();
  inline void clear_has_classification_time();
  inline void set_has_est_process_time();
  inline void clear_has_est_process_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  ::std::string* name_;
  ::std::string* timestamp_;
  ::google::protobuf::uint64 size_;
  ::google::protobuf::uint64 duration_;
  ::std::string* mime_;
  double loc_lat_;
  ::google::protobuf::uint32 bitrate_;
  ::google::protobuf::uint32 width_;
  double loc_long_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 rotation_;
  ::google::protobuf::RepeatedField< float > class_probs_;
  ::google::protobuf::uint32 frames_processed_;
  ::google::protobuf::uint32 frames_total_;
  int process_mode_;
  ::google::protobuf::uint32 extraction_time_;
  ::google::protobuf::uint32 classification_time_;
  ::google::protobuf::uint32 est_process_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_vanet_5fpb_2eproto();
  friend void protobuf_AssignDesc_vanet_5fpb_2eproto();
  friend void protobuf_ShutdownFile_vanet_5fpb_2eproto();

  void InitAsDefaultInstance();
  static VideoInfo* default_instance_;
};
// -------------------------------------------------------------------

class PartialInfo : public ::google::protobuf::Message {
 public:
  PartialInfo();
  virtual ~PartialInfo();

  PartialInfo(const PartialInfo& from);

  inline PartialInfo& operator=(const PartialInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartialInfo& default_instance();

  void Swap(PartialInfo* other);

  // implements Message ----------------------------------------------

  PartialInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartialInfo& from);
  void MergeFrom(const PartialInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional bool final = 2;
  inline bool has_final() const;
  inline void clear_final();
  static const int kFinalFieldNumber = 2;
  inline bool final() const;
  inline void set_final(bool value);

  // optional uint32 frame_size = 3;
  inline bool has_frame_size() const;
  inline void clear_frame_size();
  static const int kFrameSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 frame_size() const;
  inline void set_frame_size(::google::protobuf::uint32 value);

  // optional uint32 batch_size = 4;
  inline bool has_batch_size() const;
  inline void clear_batch_size();
  static const int kBatchSizeFieldNumber = 4;
  inline ::google::protobuf::uint32 batch_size() const;
  inline void set_batch_size(::google::protobuf::uint32 value);

  // optional .vanet_pb.ProcessMode process_mode = 5;
  inline bool has_process_mode() const;
  inline void clear_process_mode();
  static const int kProcessModeFieldNumber = 5;
  inline ::vanet_pb::ProcessMode process_mode() const;
  inline void set_process_mode(::vanet_pb::ProcessMode value);

  // repeated float class_probs = 6;
  inline int class_probs_size() const;
  inline void clear_class_probs();
  static const int kClassProbsFieldNumber = 6;
  inline float class_probs(int index) const;
  inline void set_class_probs(int index, float value);
  inline void add_class_probs(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      class_probs() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_class_probs();

  // repeated uint32 tags = 7;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 7;
  inline ::google::protobuf::uint32 tags(int index) const;
  inline void set_tags(int index, ::google::protobuf::uint32 value);
  inline void add_tags(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tags() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tags();

  // @@protoc_insertion_point(class_scope:vanet_pb.PartialInfo)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_final();
  inline void clear_has_final();
  inline void set_has_frame_size();
  inline void clear_has_frame_size();
  inline void set_has_batch_size();
  inline void clear_has_batch_size();
  inline void set_has_process_mode();
  inline void clear_has_process_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* path_;
  bool final_;
  ::google::protobuf::uint32 frame_size_;
  ::google::protobuf::uint32 batch_size_;
  int process_mode_;
  ::google::protobuf::RepeatedField< float > class_probs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tags_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_vanet_5fpb_2eproto();
  friend void protobuf_AssignDesc_vanet_5fpb_2eproto();
  friend void protobuf_ShutdownFile_vanet_5fpb_2eproto();

  void InitAsDefaultInstance();
  static PartialInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerMessage : public ::google::protobuf::Message {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  void Swap(ServerMessage* other);

  // implements Message ----------------------------------------------

  ServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ServerMessage_Type Type;
  static const Type CONNECT = ServerMessage_Type_CONNECT;
  static const Type INIT = ServerMessage_Type_INIT;
  static const Type RES = ServerMessage_Type_RES;
  static const Type QUERY_ALL = ServerMessage_Type_QUERY_ALL;
  static const Type QUERY_TAG = ServerMessage_Type_QUERY_TAG;
  static const Type QUERY_TIME = ServerMessage_Type_QUERY_TIME;
  static const Type QUERY_LOCATION = ServerMessage_Type_QUERY_LOCATION;
  static const Type PROCESS_DIRECTIVE = ServerMessage_Type_PROCESS_DIRECTIVE;
  static const Type VIDEO_REQUEST = ServerMessage_Type_VIDEO_REQUEST;
  static const Type PING = ServerMessage_Type_PING;
  static const Type DISCONNECT = ServerMessage_Type_DISCONNECT;
  static inline bool Type_IsValid(int value) {
    return ServerMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ServerMessage_Type_Type_MIN;
  static const Type Type_MAX =
    ServerMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ServerMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ServerMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ServerMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ServerMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .vanet_pb.ServerMessage.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::vanet_pb::ServerMessage_Type type() const;
  inline void set_type(::vanet_pb::ServerMessage_Type value);

  // repeated string path = 2;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 2;
  inline const ::std::string& path(int index) const;
  inline ::std::string* mutable_path(int index);
  inline void set_path(int index, const ::std::string& value);
  inline void set_path(int index, const char* value);
  inline void set_path(int index, const char* value, size_t size);
  inline ::std::string* add_path();
  inline void add_path(const ::std::string& value);
  inline void add_path(const char* value);
  inline void add_path(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& path() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_path();

  // repeated uint32 tags = 3;
  inline int tags_size() const;
  inline void clear_tags();
  static const int kTagsFieldNumber = 3;
  inline ::google::protobuf::uint32 tags(int index) const;
  inline void set_tags(int index, ::google::protobuf::uint32 value);
  inline void add_tags(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tags() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tags();

  // optional string start_time = 4;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const char* value, size_t size);
  inline ::std::string* mutable_start_time();
  inline ::std::string* release_start_time();
  inline void set_allocated_start_time(::std::string* start_time);

  // optional string end_time = 5;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const char* value, size_t size);
  inline ::std::string* mutable_end_time();
  inline ::std::string* release_end_time();
  inline void set_allocated_end_time(::std::string* end_time);

  // optional double loc_lat = 6;
  inline bool has_loc_lat() const;
  inline void clear_loc_lat();
  static const int kLocLatFieldNumber = 6;
  inline double loc_lat() const;
  inline void set_loc_lat(double value);

  // optional double loc_long = 7;
  inline bool has_loc_long() const;
  inline void clear_loc_long();
  static const int kLocLongFieldNumber = 7;
  inline double loc_long() const;
  inline void set_loc_long(double value);

  // repeated .vanet_pb.ProcessMode process_mode = 8;
  inline int process_mode_size() const;
  inline void clear_process_mode();
  static const int kProcessModeFieldNumber = 8;
  inline ::vanet_pb::ProcessMode process_mode(int index) const;
  inline void set_process_mode(int index, ::vanet_pb::ProcessMode value);
  inline void add_process_mode(::vanet_pb::ProcessMode value);
  inline const ::google::protobuf::RepeatedField<int>& process_mode() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_process_mode();

  // repeated .vanet_pb.Resource resources = 9;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 9;
  inline ::vanet_pb::Resource resources(int index) const;
  inline void set_resources(int index, ::vanet_pb::Resource value);
  inline void add_resources(::vanet_pb::Resource value);
  inline const ::google::protobuf::RepeatedField<int>& resources() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_resources();

  // repeated uint64 size = 10;
  inline int size_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 10;
  inline ::google::protobuf::uint64 size(int index) const;
  inline void set_size(int index, ::google::protobuf::uint64 value);
  inline void add_size(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      size() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_size();

  // optional bool ack = 11;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 11;
  inline bool ack() const;
  inline void set_ack(bool value);

  // optional string ip = 12;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 12;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 top_k = 13;
  inline bool has_top_k() const;
  inline void clear_top_k();
  static const int kTopKFieldNumber = 13;
  inline ::google::protobuf::uint32 top_k() const;
  inline void set_top_k(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vanet_pb.ServerMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_start_time();
  inline void clear_has_start_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_loc_lat();
  inline void clear_has_loc_lat();
  inline void set_has_loc_long();
  inline void clear_has_loc_long();
  inline void set_has_ack();
  inline void clear_has_ack();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_top_k();
  inline void clear_has_top_k();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> path_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tags_;
  ::std::string* start_time_;
  ::std::string* end_time_;
  double loc_lat_;
  int type_;
  bool ack_;
  double loc_long_;
  ::google::protobuf::RepeatedField<int> process_mode_;
  ::google::protobuf::RepeatedField<int> resources_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > size_;
  ::std::string* ip_;
  ::google::protobuf::uint32 top_k_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_vanet_5fpb_2eproto();
  friend void protobuf_AssignDesc_vanet_5fpb_2eproto();
  friend void protobuf_ShutdownFile_vanet_5fpb_2eproto();

  void InitAsDefaultInstance();
  static ServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientMessage : public ::google::protobuf::Message {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessage& default_instance();

  void Swap(ClientMessage* other);

  // implements Message ----------------------------------------------

  ClientMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ClientMessage_Type Type;
  static const Type CONNECT = ClientMessage_Type_CONNECT;
  static const Type INIT = ClientMessage_Type_INIT;
  static const Type VIDEO = ClientMessage_Type_VIDEO;
  static const Type VIDEO_INFO = ClientMessage_Type_VIDEO_INFO;
  static const Type PARTIAL_INFO = ClientMessage_Type_PARTIAL_INFO;
  static const Type FRAME = ClientMessage_Type_FRAME;
  static const Type PING = ClientMessage_Type_PING;
  static const Type UPLINK_TEST = ClientMessage_Type_UPLINK_TEST;
  static const Type DISCONNECT = ClientMessage_Type_DISCONNECT;
  static inline bool Type_IsValid(int value) {
    return ClientMessage_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ClientMessage_Type_Type_MIN;
  static const Type Type_MAX =
    ClientMessage_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ClientMessage_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ClientMessage_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ClientMessage_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ClientMessage_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 mac = 1;
  inline bool has_mac() const;
  inline void clear_mac();
  static const int kMacFieldNumber = 1;
  inline ::google::protobuf::uint64 mac() const;
  inline void set_mac(::google::protobuf::uint64 value);

  // required .vanet_pb.ClientMessage.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::vanet_pb::ClientMessage_Type type() const;
  inline void set_type(::vanet_pb::ClientMessage_Type value);

  // optional int32 size = 3;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 3;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // repeated .vanet_pb.VideoInfo video_info = 4;
  inline int video_info_size() const;
  inline void clear_video_info();
  static const int kVideoInfoFieldNumber = 4;
  inline const ::vanet_pb::VideoInfo& video_info(int index) const;
  inline ::vanet_pb::VideoInfo* mutable_video_info(int index);
  inline ::vanet_pb::VideoInfo* add_video_info();
  inline const ::google::protobuf::RepeatedPtrField< ::vanet_pb::VideoInfo >&
      video_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::vanet_pb::VideoInfo >*
      mutable_video_info();

  // optional .vanet_pb.PartialInfo partial_info = 5;
  inline bool has_partial_info() const;
  inline void clear_partial_info();
  static const int kPartialInfoFieldNumber = 5;
  inline const ::vanet_pb::PartialInfo& partial_info() const;
  inline ::vanet_pb::PartialInfo* mutable_partial_info();
  inline ::vanet_pb::PartialInfo* release_partial_info();
  inline void set_allocated_partial_info(::vanet_pb::PartialInfo* partial_info);

  // repeated .vanet_pb.Resource resources = 6;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 6;
  inline ::vanet_pb::Resource resources(int index) const;
  inline void set_resources(int index, ::vanet_pb::Resource value);
  inline void add_resources(::vanet_pb::Resource value);
  inline const ::google::protobuf::RepeatedField<int>& resources() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_resources();

  // optional bool terminate = 7;
  inline bool has_terminate() const;
  inline void clear_terminate();
  static const int kTerminateFieldNumber = 7;
  inline bool terminate() const;
  inline void set_terminate(bool value);

  // optional bool ack = 8;
  inline bool has_ack() const;
  inline void clear_ack();
  static const int kAckFieldNumber = 8;
  inline bool ack() const;
  inline void set_ack(bool value);

  // @@protoc_insertion_point(class_scope:vanet_pb.ClientMessage)
 private:
  inline void set_has_mac();
  inline void clear_has_mac();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_partial_info();
  inline void clear_has_partial_info();
  inline void set_has_terminate();
  inline void clear_has_terminate();
  inline void set_has_ack();
  inline void clear_has_ack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 mac_;
  int type_;
  ::google::protobuf::int32 size_;
  ::google::protobuf::RepeatedPtrField< ::vanet_pb::VideoInfo > video_info_;
  ::vanet_pb::PartialInfo* partial_info_;
  ::google::protobuf::RepeatedField<int> resources_;
  bool terminate_;
  bool ack_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_vanet_5fpb_2eproto();
  friend void protobuf_AssignDesc_vanet_5fpb_2eproto();
  friend void protobuf_ShutdownFile_vanet_5fpb_2eproto();

  void InitAsDefaultInstance();
  static ClientMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// VideoInfo

// required string path = 1;
inline bool VideoInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& VideoInfo::path() const {
  return *path_;
}
inline void VideoInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void VideoInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void VideoInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* VideoInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VideoInfo::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 2;
inline bool VideoInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& VideoInfo::name() const {
  return *name_;
}
inline void VideoInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VideoInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void VideoInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* VideoInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VideoInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timestamp = 3;
inline bool VideoInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoInfo::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& VideoInfo::timestamp() const {
  return *timestamp_;
}
inline void VideoInfo::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void VideoInfo::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void VideoInfo::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoInfo::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* VideoInfo::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VideoInfo::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 size = 4;
inline bool VideoInfo::has_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoInfo::set_has_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoInfo::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
  clear_has_size();
}
inline ::google::protobuf::uint64 VideoInfo::size() const {
  return size_;
}
inline void VideoInfo::set_size(::google::protobuf::uint64 value) {
  set_has_size();
  size_ = value;
}

// optional uint64 duration = 5;
inline bool VideoInfo::has_duration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoInfo::set_has_duration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoInfo::clear_has_duration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoInfo::clear_duration() {
  duration_ = GOOGLE_ULONGLONG(0);
  clear_has_duration();
}
inline ::google::protobuf::uint64 VideoInfo::duration() const {
  return duration_;
}
inline void VideoInfo::set_duration(::google::protobuf::uint64 value) {
  set_has_duration();
  duration_ = value;
}

// optional uint32 bitrate = 6;
inline bool VideoInfo::has_bitrate() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoInfo::set_has_bitrate() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoInfo::clear_has_bitrate() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoInfo::clear_bitrate() {
  bitrate_ = 0u;
  clear_has_bitrate();
}
inline ::google::protobuf::uint32 VideoInfo::bitrate() const {
  return bitrate_;
}
inline void VideoInfo::set_bitrate(::google::protobuf::uint32 value) {
  set_has_bitrate();
  bitrate_ = value;
}

// optional string mime = 7;
inline bool VideoInfo::has_mime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoInfo::set_has_mime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoInfo::clear_has_mime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoInfo::clear_mime() {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    mime_->clear();
  }
  clear_has_mime();
}
inline const ::std::string& VideoInfo::mime() const {
  return *mime_;
}
inline void VideoInfo::set_mime(const ::std::string& value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void VideoInfo::set_mime(const char* value) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(value);
}
inline void VideoInfo::set_mime(const char* value, size_t size) {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  mime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VideoInfo::mutable_mime() {
  set_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    mime_ = new ::std::string;
  }
  return mime_;
}
inline ::std::string* VideoInfo::release_mime() {
  clear_has_mime();
  if (mime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mime_;
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VideoInfo::set_allocated_mime(::std::string* mime) {
  if (mime_ != &::google::protobuf::internal::kEmptyString) {
    delete mime_;
  }
  if (mime) {
    set_has_mime();
    mime_ = mime;
  } else {
    clear_has_mime();
    mime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double loc_lat = 8;
inline bool VideoInfo::has_loc_lat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoInfo::set_has_loc_lat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoInfo::clear_has_loc_lat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoInfo::clear_loc_lat() {
  loc_lat_ = 0;
  clear_has_loc_lat();
}
inline double VideoInfo::loc_lat() const {
  return loc_lat_;
}
inline void VideoInfo::set_loc_lat(double value) {
  set_has_loc_lat();
  loc_lat_ = value;
}

// optional double loc_long = 9;
inline bool VideoInfo::has_loc_long() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoInfo::set_has_loc_long() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoInfo::clear_has_loc_long() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoInfo::clear_loc_long() {
  loc_long_ = 0;
  clear_has_loc_long();
}
inline double VideoInfo::loc_long() const {
  return loc_long_;
}
inline void VideoInfo::set_loc_long(double value) {
  set_has_loc_long();
  loc_long_ = value;
}

// optional uint32 width = 10;
inline bool VideoInfo::has_width() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VideoInfo::set_has_width() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VideoInfo::clear_has_width() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VideoInfo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 VideoInfo::width() const {
  return width_;
}
inline void VideoInfo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
}

// optional uint32 height = 11;
inline bool VideoInfo::has_height() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VideoInfo::set_has_height() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VideoInfo::clear_has_height() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VideoInfo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 VideoInfo::height() const {
  return height_;
}
inline void VideoInfo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
}

// optional uint32 rotation = 12;
inline bool VideoInfo::has_rotation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void VideoInfo::set_has_rotation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void VideoInfo::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void VideoInfo::clear_rotation() {
  rotation_ = 0u;
  clear_has_rotation();
}
inline ::google::protobuf::uint32 VideoInfo::rotation() const {
  return rotation_;
}
inline void VideoInfo::set_rotation(::google::protobuf::uint32 value) {
  set_has_rotation();
  rotation_ = value;
}

// repeated float class_probs = 13;
inline int VideoInfo::class_probs_size() const {
  return class_probs_.size();
}
inline void VideoInfo::clear_class_probs() {
  class_probs_.Clear();
}
inline float VideoInfo::class_probs(int index) const {
  return class_probs_.Get(index);
}
inline void VideoInfo::set_class_probs(int index, float value) {
  class_probs_.Set(index, value);
}
inline void VideoInfo::add_class_probs(float value) {
  class_probs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
VideoInfo::class_probs() const {
  return class_probs_;
}
inline ::google::protobuf::RepeatedField< float >*
VideoInfo::mutable_class_probs() {
  return &class_probs_;
}

// optional uint32 frames_processed = 14;
inline bool VideoInfo::has_frames_processed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void VideoInfo::set_has_frames_processed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void VideoInfo::clear_has_frames_processed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void VideoInfo::clear_frames_processed() {
  frames_processed_ = 0u;
  clear_has_frames_processed();
}
inline ::google::protobuf::uint32 VideoInfo::frames_processed() const {
  return frames_processed_;
}
inline void VideoInfo::set_frames_processed(::google::protobuf::uint32 value) {
  set_has_frames_processed();
  frames_processed_ = value;
}

// optional uint32 frames_total = 15;
inline bool VideoInfo::has_frames_total() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void VideoInfo::set_has_frames_total() {
  _has_bits_[0] |= 0x00004000u;
}
inline void VideoInfo::clear_has_frames_total() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void VideoInfo::clear_frames_total() {
  frames_total_ = 0u;
  clear_has_frames_total();
}
inline ::google::protobuf::uint32 VideoInfo::frames_total() const {
  return frames_total_;
}
inline void VideoInfo::set_frames_total(::google::protobuf::uint32 value) {
  set_has_frames_total();
  frames_total_ = value;
}

// optional .vanet_pb.ProcessMode process_mode = 16;
inline bool VideoInfo::has_process_mode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void VideoInfo::set_has_process_mode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void VideoInfo::clear_has_process_mode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void VideoInfo::clear_process_mode() {
  process_mode_ = 1;
  clear_has_process_mode();
}
inline ::vanet_pb::ProcessMode VideoInfo::process_mode() const {
  return static_cast< ::vanet_pb::ProcessMode >(process_mode_);
}
inline void VideoInfo::set_process_mode(::vanet_pb::ProcessMode value) {
  assert(::vanet_pb::ProcessMode_IsValid(value));
  set_has_process_mode();
  process_mode_ = value;
}

// optional uint32 extraction_time = 17;
inline bool VideoInfo::has_extraction_time() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void VideoInfo::set_has_extraction_time() {
  _has_bits_[0] |= 0x00010000u;
}
inline void VideoInfo::clear_has_extraction_time() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void VideoInfo::clear_extraction_time() {
  extraction_time_ = 0u;
  clear_has_extraction_time();
}
inline ::google::protobuf::uint32 VideoInfo::extraction_time() const {
  return extraction_time_;
}
inline void VideoInfo::set_extraction_time(::google::protobuf::uint32 value) {
  set_has_extraction_time();
  extraction_time_ = value;
}

// optional uint32 classification_time = 18;
inline bool VideoInfo::has_classification_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void VideoInfo::set_has_classification_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void VideoInfo::clear_has_classification_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void VideoInfo::clear_classification_time() {
  classification_time_ = 0u;
  clear_has_classification_time();
}
inline ::google::protobuf::uint32 VideoInfo::classification_time() const {
  return classification_time_;
}
inline void VideoInfo::set_classification_time(::google::protobuf::uint32 value) {
  set_has_classification_time();
  classification_time_ = value;
}

// optional uint32 est_process_time = 19;
inline bool VideoInfo::has_est_process_time() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void VideoInfo::set_has_est_process_time() {
  _has_bits_[0] |= 0x00040000u;
}
inline void VideoInfo::clear_has_est_process_time() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void VideoInfo::clear_est_process_time() {
  est_process_time_ = 0u;
  clear_has_est_process_time();
}
inline ::google::protobuf::uint32 VideoInfo::est_process_time() const {
  return est_process_time_;
}
inline void VideoInfo::set_est_process_time(::google::protobuf::uint32 value) {
  set_has_est_process_time();
  est_process_time_ = value;
}

// repeated uint32 tags = 20;
inline int VideoInfo::tags_size() const {
  return tags_.size();
}
inline void VideoInfo::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint32 VideoInfo::tags(int index) const {
  return tags_.Get(index);
}
inline void VideoInfo::set_tags(int index, ::google::protobuf::uint32 value) {
  tags_.Set(index, value);
}
inline void VideoInfo::add_tags(::google::protobuf::uint32 value) {
  tags_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VideoInfo::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VideoInfo::mutable_tags() {
  return &tags_;
}

// -------------------------------------------------------------------

// PartialInfo

// required string path = 1;
inline bool PartialInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PartialInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PartialInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PartialInfo::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& PartialInfo::path() const {
  return *path_;
}
inline void PartialInfo::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PartialInfo::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void PartialInfo::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PartialInfo::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* PartialInfo::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PartialInfo::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool final = 2;
inline bool PartialInfo::has_final() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PartialInfo::set_has_final() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PartialInfo::clear_has_final() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PartialInfo::clear_final() {
  final_ = false;
  clear_has_final();
}
inline bool PartialInfo::final() const {
  return final_;
}
inline void PartialInfo::set_final(bool value) {
  set_has_final();
  final_ = value;
}

// optional uint32 frame_size = 3;
inline bool PartialInfo::has_frame_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PartialInfo::set_has_frame_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PartialInfo::clear_has_frame_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PartialInfo::clear_frame_size() {
  frame_size_ = 0u;
  clear_has_frame_size();
}
inline ::google::protobuf::uint32 PartialInfo::frame_size() const {
  return frame_size_;
}
inline void PartialInfo::set_frame_size(::google::protobuf::uint32 value) {
  set_has_frame_size();
  frame_size_ = value;
}

// optional uint32 batch_size = 4;
inline bool PartialInfo::has_batch_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PartialInfo::set_has_batch_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PartialInfo::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PartialInfo::clear_batch_size() {
  batch_size_ = 0u;
  clear_has_batch_size();
}
inline ::google::protobuf::uint32 PartialInfo::batch_size() const {
  return batch_size_;
}
inline void PartialInfo::set_batch_size(::google::protobuf::uint32 value) {
  set_has_batch_size();
  batch_size_ = value;
}

// optional .vanet_pb.ProcessMode process_mode = 5;
inline bool PartialInfo::has_process_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PartialInfo::set_has_process_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PartialInfo::clear_has_process_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PartialInfo::clear_process_mode() {
  process_mode_ = 1;
  clear_has_process_mode();
}
inline ::vanet_pb::ProcessMode PartialInfo::process_mode() const {
  return static_cast< ::vanet_pb::ProcessMode >(process_mode_);
}
inline void PartialInfo::set_process_mode(::vanet_pb::ProcessMode value) {
  assert(::vanet_pb::ProcessMode_IsValid(value));
  set_has_process_mode();
  process_mode_ = value;
}

// repeated float class_probs = 6;
inline int PartialInfo::class_probs_size() const {
  return class_probs_.size();
}
inline void PartialInfo::clear_class_probs() {
  class_probs_.Clear();
}
inline float PartialInfo::class_probs(int index) const {
  return class_probs_.Get(index);
}
inline void PartialInfo::set_class_probs(int index, float value) {
  class_probs_.Set(index, value);
}
inline void PartialInfo::add_class_probs(float value) {
  class_probs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
PartialInfo::class_probs() const {
  return class_probs_;
}
inline ::google::protobuf::RepeatedField< float >*
PartialInfo::mutable_class_probs() {
  return &class_probs_;
}

// repeated uint32 tags = 7;
inline int PartialInfo::tags_size() const {
  return tags_.size();
}
inline void PartialInfo::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint32 PartialInfo::tags(int index) const {
  return tags_.Get(index);
}
inline void PartialInfo::set_tags(int index, ::google::protobuf::uint32 value) {
  tags_.Set(index, value);
}
inline void PartialInfo::add_tags(::google::protobuf::uint32 value) {
  tags_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PartialInfo::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PartialInfo::mutable_tags() {
  return &tags_;
}

// -------------------------------------------------------------------

// ServerMessage

// required .vanet_pb.ServerMessage.Type type = 1;
inline bool ServerMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::vanet_pb::ServerMessage_Type ServerMessage::type() const {
  return static_cast< ::vanet_pb::ServerMessage_Type >(type_);
}
inline void ServerMessage::set_type(::vanet_pb::ServerMessage_Type value) {
  assert(::vanet_pb::ServerMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// repeated string path = 2;
inline int ServerMessage::path_size() const {
  return path_.size();
}
inline void ServerMessage::clear_path() {
  path_.Clear();
}
inline const ::std::string& ServerMessage::path(int index) const {
  return path_.Get(index);
}
inline ::std::string* ServerMessage::mutable_path(int index) {
  return path_.Mutable(index);
}
inline void ServerMessage::set_path(int index, const ::std::string& value) {
  path_.Mutable(index)->assign(value);
}
inline void ServerMessage::set_path(int index, const char* value) {
  path_.Mutable(index)->assign(value);
}
inline void ServerMessage::set_path(int index, const char* value, size_t size) {
  path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMessage::add_path() {
  return path_.Add();
}
inline void ServerMessage::add_path(const ::std::string& value) {
  path_.Add()->assign(value);
}
inline void ServerMessage::add_path(const char* value) {
  path_.Add()->assign(value);
}
inline void ServerMessage::add_path(const char* value, size_t size) {
  path_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerMessage::path() const {
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerMessage::mutable_path() {
  return &path_;
}

// repeated uint32 tags = 3;
inline int ServerMessage::tags_size() const {
  return tags_.size();
}
inline void ServerMessage::clear_tags() {
  tags_.Clear();
}
inline ::google::protobuf::uint32 ServerMessage::tags(int index) const {
  return tags_.Get(index);
}
inline void ServerMessage::set_tags(int index, ::google::protobuf::uint32 value) {
  tags_.Set(index, value);
}
inline void ServerMessage::add_tags(::google::protobuf::uint32 value) {
  tags_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ServerMessage::tags() const {
  return tags_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ServerMessage::mutable_tags() {
  return &tags_;
}

// optional string start_time = 4;
inline bool ServerMessage::has_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerMessage::set_has_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerMessage::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerMessage::clear_start_time() {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    start_time_->clear();
  }
  clear_has_start_time();
}
inline const ::std::string& ServerMessage::start_time() const {
  return *start_time_;
}
inline void ServerMessage::set_start_time(const ::std::string& value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void ServerMessage::set_start_time(const char* value) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void ServerMessage::set_start_time(const char* value, size_t size) {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMessage::mutable_start_time() {
  set_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    start_time_ = new ::std::string;
  }
  return start_time_;
}
inline ::std::string* ServerMessage::release_start_time() {
  clear_has_start_time();
  if (start_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = start_time_;
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMessage::set_allocated_start_time(::std::string* start_time) {
  if (start_time_ != &::google::protobuf::internal::kEmptyString) {
    delete start_time_;
  }
  if (start_time) {
    set_has_start_time();
    start_time_ = start_time;
  } else {
    clear_has_start_time();
    start_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string end_time = 5;
inline bool ServerMessage::has_end_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerMessage::set_has_end_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerMessage::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerMessage::clear_end_time() {
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    end_time_->clear();
  }
  clear_has_end_time();
}
inline const ::std::string& ServerMessage::end_time() const {
  return *end_time_;
}
inline void ServerMessage::set_end_time(const ::std::string& value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void ServerMessage::set_end_time(const char* value) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void ServerMessage::set_end_time(const char* value, size_t size) {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMessage::mutable_end_time() {
  set_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    end_time_ = new ::std::string;
  }
  return end_time_;
}
inline ::std::string* ServerMessage::release_end_time() {
  clear_has_end_time();
  if (end_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = end_time_;
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMessage::set_allocated_end_time(::std::string* end_time) {
  if (end_time_ != &::google::protobuf::internal::kEmptyString) {
    delete end_time_;
  }
  if (end_time) {
    set_has_end_time();
    end_time_ = end_time;
  } else {
    clear_has_end_time();
    end_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional double loc_lat = 6;
inline bool ServerMessage::has_loc_lat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerMessage::set_has_loc_lat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerMessage::clear_has_loc_lat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerMessage::clear_loc_lat() {
  loc_lat_ = 0;
  clear_has_loc_lat();
}
inline double ServerMessage::loc_lat() const {
  return loc_lat_;
}
inline void ServerMessage::set_loc_lat(double value) {
  set_has_loc_lat();
  loc_lat_ = value;
}

// optional double loc_long = 7;
inline bool ServerMessage::has_loc_long() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerMessage::set_has_loc_long() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerMessage::clear_has_loc_long() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerMessage::clear_loc_long() {
  loc_long_ = 0;
  clear_has_loc_long();
}
inline double ServerMessage::loc_long() const {
  return loc_long_;
}
inline void ServerMessage::set_loc_long(double value) {
  set_has_loc_long();
  loc_long_ = value;
}

// repeated .vanet_pb.ProcessMode process_mode = 8;
inline int ServerMessage::process_mode_size() const {
  return process_mode_.size();
}
inline void ServerMessage::clear_process_mode() {
  process_mode_.Clear();
}
inline ::vanet_pb::ProcessMode ServerMessage::process_mode(int index) const {
  return static_cast< ::vanet_pb::ProcessMode >(process_mode_.Get(index));
}
inline void ServerMessage::set_process_mode(int index, ::vanet_pb::ProcessMode value) {
  assert(::vanet_pb::ProcessMode_IsValid(value));
  process_mode_.Set(index, value);
}
inline void ServerMessage::add_process_mode(::vanet_pb::ProcessMode value) {
  assert(::vanet_pb::ProcessMode_IsValid(value));
  process_mode_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
ServerMessage::process_mode() const {
  return process_mode_;
}
inline ::google::protobuf::RepeatedField<int>*
ServerMessage::mutable_process_mode() {
  return &process_mode_;
}

// repeated .vanet_pb.Resource resources = 9;
inline int ServerMessage::resources_size() const {
  return resources_.size();
}
inline void ServerMessage::clear_resources() {
  resources_.Clear();
}
inline ::vanet_pb::Resource ServerMessage::resources(int index) const {
  return static_cast< ::vanet_pb::Resource >(resources_.Get(index));
}
inline void ServerMessage::set_resources(int index, ::vanet_pb::Resource value) {
  assert(::vanet_pb::Resource_IsValid(value));
  resources_.Set(index, value);
}
inline void ServerMessage::add_resources(::vanet_pb::Resource value) {
  assert(::vanet_pb::Resource_IsValid(value));
  resources_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
ServerMessage::resources() const {
  return resources_;
}
inline ::google::protobuf::RepeatedField<int>*
ServerMessage::mutable_resources() {
  return &resources_;
}

// repeated uint64 size = 10;
inline int ServerMessage::size_size() const {
  return size_.size();
}
inline void ServerMessage::clear_size() {
  size_.Clear();
}
inline ::google::protobuf::uint64 ServerMessage::size(int index) const {
  return size_.Get(index);
}
inline void ServerMessage::set_size(int index, ::google::protobuf::uint64 value) {
  size_.Set(index, value);
}
inline void ServerMessage::add_size(::google::protobuf::uint64 value) {
  size_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ServerMessage::size() const {
  return size_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ServerMessage::mutable_size() {
  return &size_;
}

// optional bool ack = 11;
inline bool ServerMessage::has_ack() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ServerMessage::set_has_ack() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ServerMessage::clear_has_ack() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ServerMessage::clear_ack() {
  ack_ = false;
  clear_has_ack();
}
inline bool ServerMessage::ack() const {
  return ack_;
}
inline void ServerMessage::set_ack(bool value) {
  set_has_ack();
  ack_ = value;
}

// optional string ip = 12;
inline bool ServerMessage::has_ip() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ServerMessage::set_has_ip() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ServerMessage::clear_has_ip() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ServerMessage::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerMessage::ip() const {
  return *ip_;
}
inline void ServerMessage::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerMessage::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerMessage::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerMessage::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ServerMessage::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerMessage::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 top_k = 13;
inline bool ServerMessage::has_top_k() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ServerMessage::set_has_top_k() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ServerMessage::clear_has_top_k() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ServerMessage::clear_top_k() {
  top_k_ = 0u;
  clear_has_top_k();
}
inline ::google::protobuf::uint32 ServerMessage::top_k() const {
  return top_k_;
}
inline void ServerMessage::set_top_k(::google::protobuf::uint32 value) {
  set_has_top_k();
  top_k_ = value;
}

// -------------------------------------------------------------------

// ClientMessage

// required uint64 mac = 1;
inline bool ClientMessage::has_mac() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientMessage::set_has_mac() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientMessage::clear_has_mac() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientMessage::clear_mac() {
  mac_ = GOOGLE_ULONGLONG(0);
  clear_has_mac();
}
inline ::google::protobuf::uint64 ClientMessage::mac() const {
  return mac_;
}
inline void ClientMessage::set_mac(::google::protobuf::uint64 value) {
  set_has_mac();
  mac_ = value;
}

// required .vanet_pb.ClientMessage.Type type = 2;
inline bool ClientMessage::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientMessage::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientMessage::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::vanet_pb::ClientMessage_Type ClientMessage::type() const {
  return static_cast< ::vanet_pb::ClientMessage_Type >(type_);
}
inline void ClientMessage::set_type(::vanet_pb::ClientMessage_Type value) {
  assert(::vanet_pb::ClientMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional int32 size = 3;
inline bool ClientMessage::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientMessage::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientMessage::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientMessage::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 ClientMessage::size() const {
  return size_;
}
inline void ClientMessage::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// repeated .vanet_pb.VideoInfo video_info = 4;
inline int ClientMessage::video_info_size() const {
  return video_info_.size();
}
inline void ClientMessage::clear_video_info() {
  video_info_.Clear();
}
inline const ::vanet_pb::VideoInfo& ClientMessage::video_info(int index) const {
  return video_info_.Get(index);
}
inline ::vanet_pb::VideoInfo* ClientMessage::mutable_video_info(int index) {
  return video_info_.Mutable(index);
}
inline ::vanet_pb::VideoInfo* ClientMessage::add_video_info() {
  return video_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vanet_pb::VideoInfo >&
ClientMessage::video_info() const {
  return video_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::vanet_pb::VideoInfo >*
ClientMessage::mutable_video_info() {
  return &video_info_;
}

// optional .vanet_pb.PartialInfo partial_info = 5;
inline bool ClientMessage::has_partial_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientMessage::set_has_partial_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientMessage::clear_has_partial_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientMessage::clear_partial_info() {
  if (partial_info_ != NULL) partial_info_->::vanet_pb::PartialInfo::Clear();
  clear_has_partial_info();
}
inline const ::vanet_pb::PartialInfo& ClientMessage::partial_info() const {
  return partial_info_ != NULL ? *partial_info_ : *default_instance_->partial_info_;
}
inline ::vanet_pb::PartialInfo* ClientMessage::mutable_partial_info() {
  set_has_partial_info();
  if (partial_info_ == NULL) partial_info_ = new ::vanet_pb::PartialInfo;
  return partial_info_;
}
inline ::vanet_pb::PartialInfo* ClientMessage::release_partial_info() {
  clear_has_partial_info();
  ::vanet_pb::PartialInfo* temp = partial_info_;
  partial_info_ = NULL;
  return temp;
}
inline void ClientMessage::set_allocated_partial_info(::vanet_pb::PartialInfo* partial_info) {
  delete partial_info_;
  partial_info_ = partial_info;
  if (partial_info) {
    set_has_partial_info();
  } else {
    clear_has_partial_info();
  }
}

// repeated .vanet_pb.Resource resources = 6;
inline int ClientMessage::resources_size() const {
  return resources_.size();
}
inline void ClientMessage::clear_resources() {
  resources_.Clear();
}
inline ::vanet_pb::Resource ClientMessage::resources(int index) const {
  return static_cast< ::vanet_pb::Resource >(resources_.Get(index));
}
inline void ClientMessage::set_resources(int index, ::vanet_pb::Resource value) {
  assert(::vanet_pb::Resource_IsValid(value));
  resources_.Set(index, value);
}
inline void ClientMessage::add_resources(::vanet_pb::Resource value) {
  assert(::vanet_pb::Resource_IsValid(value));
  resources_.Add(value);
}
inline const ::google::protobuf::RepeatedField<int>&
ClientMessage::resources() const {
  return resources_;
}
inline ::google::protobuf::RepeatedField<int>*
ClientMessage::mutable_resources() {
  return &resources_;
}

// optional bool terminate = 7;
inline bool ClientMessage::has_terminate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ClientMessage::set_has_terminate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ClientMessage::clear_has_terminate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ClientMessage::clear_terminate() {
  terminate_ = false;
  clear_has_terminate();
}
inline bool ClientMessage::terminate() const {
  return terminate_;
}
inline void ClientMessage::set_terminate(bool value) {
  set_has_terminate();
  terminate_ = value;
}

// optional bool ack = 8;
inline bool ClientMessage::has_ack() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ClientMessage::set_has_ack() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ClientMessage::clear_has_ack() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ClientMessage::clear_ack() {
  ack_ = false;
  clear_has_ack();
}
inline bool ClientMessage::ack() const {
  return ack_;
}
inline void ClientMessage::set_ack(bool value) {
  set_has_ack();
  ack_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vanet_pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vanet_pb::ServerMessage_Type>() {
  return ::vanet_pb::ServerMessage_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vanet_pb::ClientMessage_Type>() {
  return ::vanet_pb::ClientMessage_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vanet_pb::Resource>() {
  return ::vanet_pb::Resource_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::vanet_pb::ProcessMode>() {
  return ::vanet_pb::ProcessMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_vanet_5fpb_2eproto__INCLUDED
